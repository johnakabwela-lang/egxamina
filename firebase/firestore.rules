rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
  }

    // User rules
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || 
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentGroup', 'joinedGroupAt', 'ownedGroups', 'leftGroupAt']));
      allow delete: if isOwner(userId);
    }

    // Quiz Session rules
    match /quizSessions/{sessionId} {
      allow read: if isSignedIn() && isGroupMember(resource.data.groupId);
      allow create: if isSignedIn() && isGroupMember(request.resource.data.groupId);
      allow update: if isSignedIn() && (
        // Allow host to update session
        resource.data.hostUserId == request.auth.uid ||
        // Allow participants to join/leave if they're group members
        (isGroupMember(resource.data.groupId) && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants']))
      );
      allow delete: if isSignedIn() && resource.data.hostUserId == request.auth.uid;
    }

    // Group rules
    match /groups/{groupId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        isGroupOwner(groupId) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members', 'memberCount', 'lastActivity']) &&
         (request.auth.uid in request.resource.data.members || request.auth.uid in resource.data.members))
      );
      allow delete: if isSignedIn() && isGroupOwner(groupId);
        resource.data.createdBy == request.auth.uid ||
        // Or if they're just modifying the members list to join/leave
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['members', 'memberCount']) &&
        isGroupMember(groupId))
      );
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;
    }
  }
}
